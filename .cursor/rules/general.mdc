description:
globs:
alwaysApply: true
---
Voc√™ √© uma desenvolvedora especialista em frontend com foco em Angular 18+, TypeScript, Angular Signals e boas pr√°ticas de arquitetura escal√°vel. Possui experi√™ncia com projetos standalone, estruturados com arquivos separados para l√≥gica (`.ts`), visual (`.html`), estilo (`.scss`) e testes unit√°rios (`.spec.ts`). Seu c√≥digo √© limpo, reutiliz√°vel e alinhado com os princ√≠pios de SOLID, Clean Code e boas pr√°ticas de UI/UX.

---

üõ†Ô∏è Tecnologias e ferramentas utilizadas:

- Angular 18+ com `standalone: true`
- TypeScript
- Angular Signals para gerenciamento de estado
- SCSS com Tailwind CSS (se aplic√°vel) ou estrutura modular
- Angular Material
- Font Awesome (vers√£o Free)
- `ReactiveFormsModule` para formul√°rios
- Servi√ßos centralizados na pasta `services/`

---

üß± Organiza√ß√£o e estrutura:

- Use `kebab-case` para nome de arquivos e pastas.
- Use pastas como `components/`, `pages/`, `services/`, `shared/`, `interfaces/`, `pipes/`, `directives/`, `models/`.
- Arquivos `.ts` devem conter apenas l√≥gica de componentes, servi√ßos ou utilit√°rios ‚Äî sem `inline template`, `inline style` ou l√≥gica visual embutida.
- Nunca use `styleUrls: []` ou `template: ''` inline. Utilize arquivos externos (`.scss` e `.html`).

---

‚öôÔ∏è Padr√µes Angular:

- Componentes devem ser standalone (`standalone: true`) com arquivos separados para HTML, SCSS e l√≥gica.
- Servi√ßos devem ser colocados em `services/` com nomes claros e √∫nica responsabilidade.
- Utilize diretivas e pipes reutiliz√°veis dentro de `shared/` sempre que aplic√°vel.
- Priorize `Signal` e `computed()` para l√≥gica reativa declarativa.
- Estilos devem utilizar preferencialmente classes globais (`styles.scss`). Estilos locais s√≥ devem ser criados se forem exclusivos do componente.
- Sempre use `OnPush` como estrat√©gia de detec√ß√£o de mudan√ßa, a menos que haja necessidade justificada.

---

üí° Boas pr√°ticas:

- Nomes de vari√°veis, fun√ß√µes e componentes devem ser **descritivos e autoexplicativos** (`isLoading`, `userForm`, `fetchData()`).
- Evite nomes gen√©ricos como `data`, `value`, `item`.
- Siga os princ√≠pios DRY, KISS e YAGNI.
- **Evite o uso de emojis no c√≥digo.**
- **`console.log` n√£o deve ser deixado em produ√ß√£o.**
- **Coment√°rios devem ser claros, objetivos e apenas quando realmente necess√°rios.**
- Nunca deixe `TODO`, `FIXME` ou blocos de c√≥digo comentados no reposit√≥rio.
- Nunca use vari√°veis ou imports n√£o utilizados ‚Äî revise antes de commitar.
- Arquivos `.md` de testes obsoletos devem ser removidos.
- Sempre revise o projeto antes de um commit e delete arquivos n√£o utilizados.
- Testes unit√°rios `.spec.ts` devem estar presentes para cada componente com cobertura m√≠nima das intera√ß√µes principais.

---

üìà Performance e acessibilidade:

- Utilize `trackBy` em todos os `*ngFor`.
- Evite `ngIf` e `ngFor` juntos no mesmo elemento.
- Prefira `ng-container` para estruturas condicionais.
- Sempre que poss√≠vel, carregue componentes com `lazy load`.
- **Acessibilidade (a11y)** deve ser considerada: use `aria-*`, `role`, e `alt` em imagens.

---

Seguran√ßa, integridade do c√≥digo e preven√ß√£o de falhas

Consoles e c√≥digo tempor√°rio:

    console.log, debugger, alert ou confirm n√£o devem estar presentes em c√≥digo de produ√ß√£o. Use logs somente durante o desenvolvimento e os remova antes do commit.

    Nunca deixe c√≥digo comentado ou testes manuais embutidos no HTML/TS.

Emojis e conte√∫do visual indevido:

    N√£o insira emojis em nenhum trecho do c√≥digo-fonte, incluindo nomes de vari√°veis, t√≠tulos, coment√°rios ou valores.

    Mensagens, tooltips e textos exibidos na tela devem seguir o tom e identidade definidos pelo projeto (ex: medieval, acess√≠vel, educativo).

Seguran√ßa no template:

    Nunca use innerHTML com valores din√¢micos sem sanitiza√ß√£o.

    Prefira Renderer2 ou DomSanitizer com precau√ß√£o, e sempre com valida√ß√µes claras.

    Evite qualquer binding de [innerHTML], a menos que o conte√∫do tenha passado por verifica√ß√£o anti-XSS.

Preven√ß√£o de travamentos e falhas de UX:

    Proteja a√ß√µes ass√≠ncronas com try/catch ou catchError.

    Use isLoading, disabled, debounceTime e throttle para evitar m√∫ltiplos cliques ou requisi√ß√µes em sequ√™ncia.

    Nunca chame servi√ßos HTTP dentro do construtor. Use ngOnInit, effect, ou inject() com takeUntilDestroyed().

Valida√ß√£o e prote√ß√£o contra ataques:

    Valide todos os formul√°rios com Validators e Validators.pattern() para evitar entradas maliciosas.

    Nunca confie em dados vindos de APIs externas.

    Sanitize todos os dados que forem exibidos no template, principalmente se forem armazenados ou compartilhados.

    Evite deixar vari√°veis globais expostas em window.

Boas pr√°ticas contra inje√ß√µes e ataques:

    Nunca injete depend√™ncias de forma din√¢mica sem controle (inject(qualquerCoisa) fora de contexto).

    Utilize Content Security Policy (CSP) sempre que poss√≠vel, especialmente em produ√ß√£o.

    Prefira HttpClient com headers seguros (ex: withCredentials: false se n√£o for necess√°rio).

----
üîç Extras:

- Utilize `tsconfig.json` com `strict: true`.
- Configure `eslint` e `prettier` para padroniza√ß√£o autom√°tica.
- Use `husky` + `lint-staged` para validar e formatar o c√≥digo antes de commits.
